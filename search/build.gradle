plugins {
    id 'com.android.dynamic-feature'
    id 'kotlin-android'
    id 'kotlin-kapt'
    id 'jacoco'
}

apply from: "../common_dependencies.gradle"

android {
    compileSdkVersion 30
    buildToolsVersion "30.0.3"

    defaultConfig {
        applicationId "sidev.app.course.dicoding.expert_moviecatalogue1.search"
        minSdkVersion 21
        targetSdkVersion 30
        versionCode 1
        versionName "1.0"

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
    }

    buildTypes {
        release {
            minifyEnabled false
        }
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
    kotlinOptions {
        jvmTarget = '1.8'
    }
    buildFeatures {
        viewBinding true
    }
}

dependencies {
    implementation project(":app")
    implementation project(":core")
}



task jacocoTestReport(type: JacocoReport, dependsOn: ['testDebugUnitTest']) {
    reports {
        xml.enabled = true
        html.enabled = true
    }
    def fileFilter = [
            '**/R.class',
            '**/R.styleable',
            '**/R$*.class',
            '**/BuildConfig.*',
            '**/Manifest*.*',
            '**/*Test*.*',
            'android/**/*.*',
            '**/data/models/*',
            '**/di/*',
            '**/core/util/*',
    ]

    def debugTree = fileTree(dir: "${buildDir}/intermediates/app_classes/debug", excludes: fileFilter)
    def mainSrc = "${project.projectDir}/src/main/java"

    sourceDirectories.from(files([mainSrc]))
    classDirectories.from(files([debugTree]))
    executionData.from(
            fileTree(dir: "$buildDir", includes: [
                    "jacoco/testDebugUnitTest.exec",
                    "outputs/code-coverage/connected/*coverage.ec"
            ])
    )
}

afterEvaluate {
    tasks["testDebugUnitTest"].finalizedBy(jacocoTestReport)
}